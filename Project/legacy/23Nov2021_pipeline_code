import numpy
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv(r"Biovid_Train_65_Subjects.csv")
#nan_value = float("NaN")
#df.replace("", nan_value, inplace=True)
df = df.dropna()
#print(df)

select_features = df.iloc[:, 1:42]
#print(select_features)

df2 = pd.read_csv(r"List_ExtractedFeatures.csv")
df2 = df2.dropna()
df2.head()
#df2.isnull().values.any() #check if any NaN remain in dataframe



X = df2.iloc[:, 2:42]
y = df2.iloc[:, 1]
#shuffle the rows of the dataframe
from sklearn.utils import shuffle
df2 = shuffle(df2)

#splitting the data into training and training
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
print("X-train:\n\n", X_train)
print("X-test:\n\n",X_test)
print("y-train:\n\n",y_train)
print("y-test:\n\n",y_test)

from tpot import TPOTClassifier
pipeline_optimizer = TPOTClassifier(generations=5, population_size=20, cv=5,
                                    random_state=42, verbosity=2)


pipeline_optimizer.fit(X_train, y_train)

#print(pipeline_optimizer.score(X_test, y_test))

pipeline_optimizer.export('tpot_exported_pipeline.py')

from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
model = XGBClassifier()
model.fit(X_train, y_train)
print(model)

y_pred = model.predict(X_test)
#print(y_pred)
predictions = [value for value in y_pred]
#print(predictions)

#perform some metrics
accuracy = accuracy_score(y_test, predictions)
print("Accuracy: %.2f%%" % (accuracy * 100.0))

from sklearn.metrics import classification_report
from sklearn.metrics import roc_curve
labels = ["level_zero", "level_one", "level_two", "level_three", "level_four"]
print(classification_report(y_test, y_pred, target_names=labels))
#print(roc_curve(y_test, y_pred, labels)

from sklearn.metrics import multilabel_confusion_matrix
multilabel_confusion_matrix(y_test, y_pred, labels=labels)


from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
cm = confusion_matrix(y_test, predictions, labels=labels)
disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=labels)
disp.plot()
plt.show()

#from sklearn.metrics import RocCurveDisplay
#xgb_disp = RocCurveDisplay.from_estimator(model, X_test, y_test)


#One vs Rest Classifier
from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import LinearSVC
SVC_y_pred = OneVsRestClassifier(LinearSVC(random_state=0)).fit(X_test, y_test).predict(X_test)

print(SVC_y_pred)
accuracy = accuracy_score(y_test, SVC_y_pred)
print("Accuracy: %.2f%%" % (accuracy * 100.0))

